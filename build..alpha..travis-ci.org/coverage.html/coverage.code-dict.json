{"/home/travis/build/npmtest/node-npmtest-parse-messy-time/test.js":"/* istanbul instrument in package npmtest_parse_messy_time */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-parse-messy-time/lib.npmtest_parse_messy_time.js":"/* istanbul instrument in package npmtest_parse_messy_time */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_parse_messy_time = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_parse_messy_time = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-parse-messy-time/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-parse-messy-time && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_parse_messy_time */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_parse_messy_time\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_parse_messy_time.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_parse_messy_time.rollup.js'] =\n            local.assetsDict['/assets.npmtest_parse_messy_time.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_parse_messy_time.__dirname + '/lib.npmtest_parse_messy_time.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-parse-messy-time/node_modules/parse-messy-time/index.js":"var months = [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n    'September', 'October', 'November', 'December'\n];\nvar days = [\n    'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n];\n\nvar hmsre = RegExp(\n    '(\\\\d+\\\\.?\\\\d*(?:[:h]\\\\d+\\\\.?\\\\d*(?:[:m]\\\\d+\\\\.\\\\d*s?)?)?)'\n);\nvar tokre = RegExp(\n    '\\\\s+|(\\\\d+(?:st|th|nd|rd|th))\\\\b'\n    + '|' + hmsre.source + '([A-Za-z]+)'\n    + '|([A-Za-z]+)' + hmsre.source\n);\n\nmodule.exports = function (str, opts) {\n    if (!opts) opts = {};\n    var now = opts.now || new Date;\n    if (typeof now === 'number' || typeof now === 'string') now = new Date(now);\n    var ago = false;\n    var tokens = str.split(tokre).filter(Boolean).map(lc);\n    var res = {};\n    for (var i = 0; i < tokens.length; i++) {\n        var t = tokens[i];\n        var next = tokens[i+1];\n        var prev = tokens[i-1];\n        var m;\n        \n        if (m = /(\\d+)(st|nd|rd|th)/i.exec(t)) {\n            if (next === 'of') {\n                next = tokens[i+2];\n                i++;\n            }\n            res.date = Number(m[1]);\n            if (monthish(next)) {\n                res.month = next;\n                i++;\n            }\n        }\n        else if ((m = /(\\d+)(st|nd|rd|th)?/i.exec(next))\n        && monthish(t)) {\n            res.month = t;\n            res.date = Number(m[1]);\n            i++;\n            if (/^\\d+$/.test(tokens[i+1])) { // year\n                res.year = Number(tokens[i+1]);\n                i++;\n            }\n        }\n        else if ((m = hmsre.exec(t)) && isunit(next)) {\n            if (tokens[i-1] === 'in') {\n                for (var j = i; j < tokens.length; j += 2) {\n                    if (tokens[j] === 'and') j --;\n                    else if ((m = hmsre.exec(tokens[j]))\n                    && ishunit(tokens[j+1])) {\n                        addu(parseh(tokens[j]), nunit(tokens[j+1]));\n                    }\n                    else if ((m = /^(\\d+\\.?\\d*)/.exec(tokens[j]))\n                    && isdunit(tokens[j+1])) {\n                        daddu(Number(m[1]), nunit(tokens[j+1]));\n                    }\n                    else break;\n                }\n                i = j;\n            }\n            else {\n                for (var j = i + 2; j < tokens.length; j++) {\n                    if (tokens[j] === 'ago') {\n                        ago = true;\n                        break;\n                    }\n                }\n                if (j === tokens.length) continue;\n                \n                for (var k = i; k < j; k++) {\n                    if ((m = hmsre.exec(tokens[k])) && ishunit(tokens[k+1])) {\n                        subu(parseh(tokens[k]), nunit(tokens[k+1]));\n                    }\n                    else if ((m = /^(\\d+\\.?\\d*)/.exec(tokens[k]))\n                    && isdunit(tokens[k+1])) {\n                        dsubu(Number(m[1]), nunit(tokens[k+1]));\n                    }\n                }\n                i = j;\n            }\n        }\n        else if (/noon/.test(t)) {\n          res.hours = 12\n          res.minutes = 0\n          res.seconds = 0\n        }\n        else if (/midnight/.test(t)) {\n          res.hours = 0\n          res.minutes = 0\n          res.seconds = 0\n        }\n        else if (/\\d+[:h]\\d+/.test(t) || /^(am|pm)/.test(next)) {\n            var hms = parseh(t, next);\n            if (hms[0] !== null) res.hours = hms[0];\n            if (hms[1] !== null) res.minutes = hms[1];\n            if (hms[2] !== null) res.seconds = hms[2];\n        }\n        else if ((m = /^(\\d+)/.exec(t)) && monthish(next)) {\n            var x = Number(m[1]);\n            if (res.year === undefined && x > 31) res.year = x;\n            else if (res.date === undefined) res.date = x;\n            if (res.month === undefined) res.month = next;\n            i++;\n        }\n        else if (monthish(t) && (m = /^(\\d+)/.exec(next))) {\n            var x = Number(m[1]);\n            if (res.year === undefined && x > 31) res.year = x;\n            else if (res.date === undefined) res.date = x;\n            if (res.month === undefined) res.month = t;\n            i++;\n        }\n        else if ((m = /^(\\d+)/.exec(t)) && monthish(prev)) {\n            var x = Number(m[1]);\n            if (res.year === undefined) res.year = x;\n            else if (res.hours === undefined) res.hours = x;\n        }\n        else if (m = /^[`'\\u00b4\\u2019](\\d+)/.exec(t)) {\n            res.year = Number(m[1]);\n        }\n        else if (/^\\d{4}[\\W_]\\d{1,2}[\\W_]\\d{1,2}/.test(t)) {\n            var yms = t.split(/[\\W_]/);\n            res.year = Number(yms[0]);\n            res.month = Number(yms[1]) - 1;\n            res.date = Number(yms[2]);\n        }\n        else if (m = /^(\\d+)/.exec(t)) {\n            var x = Number(m[1]);\n            if (res.hours === undefined && x < 24) res.hours = x;\n            else if (res.date === undefined && x <= 31) res.date = x;\n            else if (res.year === undefined && x > 31) res.year = x;\n            else if (res.year == undefined\n            && res.hours !== undefined && res.date !== undefined) {\n                res.year = x;\n            }\n            else if (res.hours === undefined\n            && res.date !== undefined && res.year !== undefined) {\n                res.hours = x;\n            }\n            else if (res.date === undefined\n            && res.hours !== undefined && res.year !== undefined) {\n                res.date = x;\n            }\n        }\n        else if (/^today$/.test(t) && res.date === undefined) {\n            res.date = now.getDate();\n            res.month = months[now.getMonth()];\n            res.year = now.getFullYear();\n        }\n        else if (/^now$/.test(t) && res.date === undefined) {\n            res.hours = now.getHours();\n            res.minutes = now.getMinutes();\n            res.seconds = now.getSeconds();\n            res.date = now.getDate();\n            res.month = months[now.getMonth()];\n            res.year = now.getFullYear();\n        }\n        else if (/^to?m+o?r+o?w?/.test(t) && res.date === undefined) {\n            var tomorrow = new Date(now.valueOf() + 24*60*60*1000);\n            res.date = tomorrow.getDate();\n            if (res.month === undefined) {\n                res.month = months[tomorrow.getMonth()];\n            }\n            if (res.year === undefined) {\n                res.year = tomorrow.getFullYear();\n            }\n        }\n        else if (/^yesterday/.test(t) && res.date === undefined) {\n            var yst = new Date(now.valueOf() - 24*60*60*1000);\n            res.date = yst.getDate();\n            if (res.month === undefined) {\n                res.month = months[yst.getMonth()];\n            }\n            if (res.year === undefined) {\n                res.year = yst.getFullYear();\n            }\n        }\n        else if (t === 'next' && dayish(next) && res.date === undefined) {\n            setFromDay(next, 7);\n            i++;\n        }\n        else if (t === 'last' && dayish(next) && res.date === undefined) {\n            setFromDay(next, -7);\n            i++;\n        }\n        else if (dayish(t) && res.date === undefined) {\n            setFromDay(t, 0);\n        }\n    }\n    \n    if (res.year < 100) {\n        var y = now.getFullYear();\n        var py = y % 100;\n        if (py + 10 < res.year) {\n            res.year += y - py - 100;\n        }\n        else res.year += y - py;\n    }\n    if (res.month && typeof res.month !== 'number') {\n        res.month = nmonth(res.month);\n    }\n    var out = new Date(now);\n    out.setHours(res.hours === undefined ? 0 : res.hours);\n    out.setMinutes(res.minutes === undefined ? 0 : res.minutes);\n    out.setSeconds(res.seconds === undefined ? 0 : res.seconds);\n    var monthSet = res.month;\n    if (typeof res.month === 'number') {\n        out.setMonth(res.month)\n    }\n    else if (res.month) {\n        monthSet = months.indexOf(res.month);\n        out.setMonth(monthSet);\n    }\n    if (res.date !== undefined) out.setDate(res.date);\n    if (monthSet !== undefined && out.getMonth() !== monthSet) {\n        out.setMonth(monthSet);\n    }\n     \n    if (res.year) out.setYear(res.year);\n    else if (out < now && !ago\n    && (Math.abs(out.getMonth()+12 -now.getMonth()) % 12) >= 1) {\n        out.setYear(now.getFullYear() + 1);\n    }\n    return out;\n    \n    function setFromDay (t, x) {\n        var dayi = days.indexOf(nday(t));\n        var xdays = (7 + dayi - now.getDay()) % 7 + x;\n        var d = new Date(now.valueOf() + xdays*24*60*60*1000);\n        res.date = d.getDate();\n        if (res.month === undefined) {\n            res.month = months[d.getMonth()];\n        }\n        if (res.year === undefined) {\n            res.year = d.getFullYear();\n        }\n    }\n    \n    function opu (hms, u, op) {\n        if (u == 'hours') {\n            res.hours = op(now.getHours(), hms[0]);\n            res.minutes = op(now.getMinutes(), hms[1] === null ? 0 : hms[1]);\n            res.seconds = op(now.getSeconds(), hms[2] === null ? 0 : hms[2]);\n        }\n        else if (u == 'minutes') {\n            if (res.hours === undefined) res.hours = now.getHours();\n            res.minutes = op(now.getMinutes(), hms[0] === null ? 0 : hms[0]);\n            res.seconds = op(now.getSeconds(), hms[1] === null ? 0 : hms[1]);\n        }\n        else if (u == 'seconds') {\n            if (res.hours === undefined) res.hours = now.getHours();\n            if (res.minutes === undefined) res.minutes = now.getMinutes();\n            res.seconds = op(now.getSeconds(), hms[0] === null ? 0 : hms[0]);\n        }\n    }\n    function subu (hms, u) { opu(hms, u, sub) }\n    function addu (hms, u) { opu(hms, u, add) }\n    \n    function dopu (n, u, op) {\n        if (res.hours === undefined) res.hours = now.getHours();\n        if (res.minutes === undefined) res.minutes = now.getMinutes();\n        if (res.seconds === undefined) res.seconds = now.getSeconds();\n        if (u === 'days') {\n            res.date = op(now.getDate(), n);\n        }\n        else if (u === 'weeks') {\n            res.date = op(now.getDate(), n*7);\n        }\n        else if (u === 'months') {\n            res.month = op(now.getMonth(), n);\n        }\n        else if (u === 'years') {\n            res.year = op(now.getFullYear(), n);\n        }\n    }\n    function dsubu (n, u) { dopu(n, u, sub) }\n    function daddu (n, u) { dopu(n, u, add) }\n};\n\nfunction add (a, b) { return a + b }\nfunction sub (a, b) { return a - b }\n\nfunction lc (s) { return String(s).toLowerCase() }\n\nfunction ishunit (s) {\n    var n = nunit(s);\n    return n === 'hours' || n === 'minutes' || n === 'seconds';\n}\nfunction isdunit (s) {\n    var n = nunit(s);\n    return n === 'days' || n === 'weeks' || n === 'months' || n === 'years';\n}\nfunction isunit (s) { return Boolean(nunit(s)) }\n\nfunction nunit (s) {\n    if (/^(ms|millisecs?|milliseconds?)$/.test(s)) return 'milliseconds';\n    if (/^(s|secs?|seconds?)$/.test(s)) return 'seconds';\n    if (/^(m|mins?|minutes?)$/.test(s)) return 'minutes';\n    if (/^(h|hrs?|hours?)$/.test(s)) return 'hours';\n    if (/^(d|days?)$/.test(s)) return 'days';\n    if (/^(w|wks?|weeks?)$/.test(s)) return 'weeks';\n    if (/^(mo|mnths?|months?)$/.test(s)) return 'months';\n    if (/^(y|yrs?|years?)$/.test(s)) return 'years';\n}\n\nfunction monthish (s) { return Boolean(nmonth(s)) }\n\nfunction dayish (s) {\n    return /^(mon|tue|wed|thu|fri|sat|sun)/i.test(s);\n}\n\nfunction nmonth (s) {\n    if (/^jan/i.test(s)) return 'January';\n    if (/^feb/i.test(s)) return 'February';\n    if (/^mar/i.test(s)) return 'March';\n    if (/^apr/i.test(s)) return 'April';\n    if (/^may/i.test(s)) return 'May';\n    if (/^jun/i.test(s)) return 'June';\n    if (/^jul/i.test(s)) return 'July';\n    if (/^aug/i.test(s)) return 'August';\n    if (/^sep/i.test(s)) return 'September';\n    if (/^oct/i.test(s)) return 'October';\n    if (/^nov/i.test(s)) return 'November';\n    if (/^dec/i.test(s)) return 'December';\n}\n\nfunction nday (s) {\n    if (/^mon/i.test(s)) return 'Monday';\n    if (/^tue/i.test(s)) return 'Tuesday';\n    if (/^wed/i.test(s)) return 'Wednesday';\n    if (/^thu/i.test(s)) return 'Thursday';\n    if (/^fri/i.test(s)) return 'Friday';\n    if (/^sat/i.test(s)) return 'Saturday';\n    if (/^sun/i.test(s)) return 'Sunday';\n}\n\nfunction parseh (s, next) {\n    var m = /(\\d+\\.?\\d*)(?:[:h](\\d+\\.?\\d*)(?:[:m](\\d+\\.?\\d*s?\\.?\\d*))?)?/.exec(s);\n    var hms = [ Number(m[1]), null, null ];\n    if (/^am/.test(next) && hms[0] == 12) hms[0] -= 12;\n    if (/^pm/.test(next) && hms[0] < 12) hms[0] += 12;\n    if (m[2]) hms[1] = Number(m[2]);\n    if (m[3]) hms[2] = Number(m[3]);\n    if (hms[0] > floorup(hms[0])) {\n        hms[1] = floorup((hms[0] - floorup(hms[0])) * 60);\n        hms[0] = floorup(hms[0]);\n    }\n    if (hms[1] > floorup(hms[1])) {\n        hms[2] = floorup((hms[1] - floorup(hms[1])) * 60);\n        hms[1] = floorup(hms[1]);\n    }\n    return hms;\n}\n\nfunction floorup (x) {\n    return Math.floor(Math.round(x * 1e6) / 1e6);\n}\n"}